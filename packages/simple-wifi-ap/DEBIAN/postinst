#!/bin/bash

# Don't exit on error
#set -e

# summary of how this script can be called:
#       * <postinst> `configure' <most-recently-configured-version>
#       * <old-postinst> `abort-upgrade' <new version>
#       * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#         <new-version>
#       * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#         <failed-install-package> <version> `removing'
#         <conflicting-package> <version>
#
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

. /usr/share/debconf/confmodule

# Delete existing connection profiles
nm_profile_delete_all() {
	# List existing connections
	for tmp_uuid in `nmcli --terse --fields UUID connection show`; do
		nmcli --terse connection delete "${tmp_uuid}" &>/dev/null
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to delete connection, UUID=\"${tmp_uuid}\""
			exit 1
		fi
	done
}

# Create Wifi AP connection profile
nm_profile_accesspoint_create() {
	NM_WIFI_DEVICE="${1}"					# Wifi Device
	NET_IPV4_METHOD="${2}"
	NET_IPV4_ADDRESSMASK="${3}"
	NET_IPV4_DNS="${4}"
	NET_IPV4_GATEWAY="${5}"
	NM_BRIDGE_UUID="${6}"					# UUID of previously created bridge
	NM_WIFI_PROFILENAME="swap-ap1"				# NetworkManager profile name
	if db_get simple-wifi-ap/wifi_ssid; then
		NM_WIFI_SSID="${RET}"				# Access Point SSID
	else
		echo "postinst: Failed to get SSID"
		exit 1
	fi
	if db_get simple-wifi-ap/wifi_psk; then
		NM_WIFI_PSK="${RET}"				# Access Point Passphrase
	else
		echo "postinst: Failed to get passphrase"
		exit 1
	fi

	# Create WiFi AP profile (don't autoconnect until properly configured)
	nmcli connection add type wifi ifname "${NM_WIFI_DEVICE}" con-name "${NM_WIFI_PROFILENAME}" autoconnect no ssid "${NM_WIFI_SSID}" &>/dev/null
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to create AP connection profile."
		exit 1
	fi

	# Get created connection UUID
	nm_uuid=`nmcli --terse --fields "connection.uuid" connection show "${NM_WIFI_PROFILENAME}" 2>/dev/null`
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to find AP connection profile."
		exit 1
	fi
	nm_uuid="${nm_uuid#connection.uuid:*}"

	# Configure as Access Point (Band hardwired to bg)
	nmcli connection modify "${nm_uuid}" 802-11-wireless.mode ap 802-11-wireless.band bg &>/dev/null
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to configure as AP."
		exit 1
	fi

	# Configure Access Point IPv6 settings
	nmcli connection modify "${nm_uuid}" ipv6.method disable &>/dev/null
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to configure AP IPv6 settings."
		exit 1
	fi

	# Configure IPv4 configuration method
	if [ "${NET_IPV4_METHOD}" = Static ] && [ -z "${NM_BRIDGE_UUID}" ]; then
		# Configure Access Point IPv4 settings
		nmcli connection modify "${nm_uuid}" ipv4.method manual ipv4.addresses "${NET_IPV4_ADDRESSMASK}" ipv4.dns "${NET_IPV4_DNS}" ipv4.gateway "${NET_IPV4_GATEWAY}" &>/dev/null
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to configure AP IPv4 settings."
			exit 1
		fi
	elif [ "${NET_IPV4_METHOD}" = Dynamic ] && [ -z "${NM_BRIDGE_UUID}" ]; then
		# Configure Access Point IPv4 settings
		nmcli connection modify "${nm_uuid}" ipv4.method auto &>/dev/null
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to configure AP IPv4 settings."
			exit 1
		fi
	else
		# Configure Access Point IPv4 settings
		nmcli connection modify "${nm_uuid}" ipv4.method disable &>/dev/null
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to configure AP IPv4 settings."
			exit 1
		fi
	fi

	# Add to bridge if bridge UUID specified
	if [ -n "${NM_BRIDGE_UUID}" ]; then
		nmcli connection modify "${nm_uuid}" master "${NM_BRIDGE_UUID}" slave-type bridge &>/dev/null
	fi

	# If passphrase is set, configure security
	if [ -n "${NM_WIFI_PSK}" ]; then
		# Configure Access Point security passphrase
		nmcli connection modify "${nm_uuid}" wifi-sec.key-mgmt wpa-psk &>/dev/null
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to configure AP securtiy."
			exit 1
		fi
		nmcli connection modify "${nm_uuid}" wifi-sec.psk "${NM_WIFI_PSK}" &>/dev/null
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to configure AP passphrase."
			exit 1
		fi
	fi

	# Turn on Wifi (it might be off)
	nmcli wifi on &>/dev/null
	# Can this fail, and still be okay? No power control?
#	if [ ${?} -ne 0 ]; then
#		echo "postinst: Failed to power on Wifi."
#		exit 1
#	fi

	# Now configure as autoconnect
	nmcli connection modify "${nm_uuid}" autoconnect yes &>/dev/null
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to configure AP autoconnect."
		exit 1
	fi
}

# Create bridge connection profile
nm_profile_bridge_create() {
	NM_BRIDGE_DEV="${1}"					# Bridge Device
	NET_IPV4_METHOD="${2}"
	NET_IPV4_ADDRESSMASK="${3}"
	NET_IPV4_DNS="${4}"
	NET_IPV4_GATEWAY="${5}"
	NM_BRIDGE_PROFILENAME="swap-${NM_BRIDGE_DEV}"

	nmcli connection add type bridge ifname "${NM_BRIDGE_DEV}" con-name "${NM_BRIDGE_PROFILENAME}" connection.permissions "user:root" autoconnect yes &>/dev/null
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to create bridge connection profile."
		exit 1
	fi

	# Get created connection UUID
	nm_uuid=`nmcli --terse --fields "connection.uuid" connection show "${NM_BRIDGE_PROFILENAME}" 2>/dev/null`
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to find bridge connection profile."
		exit 1
	fi
	nm_uuid="${nm_uuid#connection.uuid:*}"

	# Configure Access Point IPv6 settings
	nmcli connection modify "${nm_uuid}" ipv6.method disable &>/dev/null
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to configure bridge IPv6 settings."
		exit 1
	fi

	# Configure IPv4 configuration method
	if [ "${NET_IPV4_METHOD}" = Static ]; then
		# Configure Access Point IPv4 settings
		nmcli connection modify "${nm_uuid}" ipv4.method manual ipv4.addresses "${NET_IPV4_ADDRESSMASK}" ipv4.dns "${NET_IPV4_DNS}" ipv4.gateway "${NET_IPV4_GATEWAY}" &>/dev/null
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to configure bridge IPv4 settings."
			exit 1
		fi
	elif [ "${NET_IPV4_METHOD}" = Dynamic ]; then
		# Configure Access Point IPv4 settings
		nmcli connection modify "${nm_uuid}" ipv4.method auto &>/dev/null
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to configure bridge IPv4 settings."
			exit 1
		fi
	else
		# Configure Access Point IPv4 settings
		nmcli connection modify "${nm_uuid}" ipv4.method disable &>/dev/null
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to configure bridge IPv4 settings."
			exit 1
		fi
	fi

	# Return this so other functions can use it
	echo "${nm_uuid}"
}

# Add raw interfaces to the bridge
nm_bridge_interfaces_add() {
	NM_BRIDGE_UUID="${1}"

	if db_get simple-wifi-ap/bridge_extra_devices; then
		bridge_devices="$RET"

		for bridge_device in "${bridge_devices}"; do
			nm_bridge_profilename="swap-${bridge_device}"
			echo "postinst: Adding bridge device: ${bridge_device}."
			nmcli connection add type ethernet ifname "${bridge_device}" con-name "${nm_bridge_profilename}" master "${NM_BRIDGE_UUID}" &>/dev/null
			if [ ${?} -ne 0 ]; then
				echo "postinst: Failed to add bridge interface."
				exit 1
			fi
		done
	fi
}

# Generate DHCP range from address mask
dhcp_range_generate() {
	DHCP_ADDRESSMASK="${1}"

	# Identify & parse passed data (address)
	rslt=`echo "${DHCP_ADDRESSMASK}"| sed -E 's|^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/([0-9]{1,2})$| \1 \2 \3 \4 \5 |'`
	if [ ${?} -eq 0 ]; then
		# Convert to array
		rslt=( ${rslt} )
		# Force to number
		rslt[0]=$((${rslt[0]}+0))
		rslt[1]=$((${rslt[1]}+0))
		rslt[2]=$((${rslt[2]}+0))
		rslt[3]=$((${rslt[3]}+0))
		rslt[4]=$((${rslt[4]}+0))
		if [ "${rslt[4]}" -eq 24 ]; then
			echo " ${rslt[0]}.${rslt[1]}.${rslt[2]}.100 ${rslt[0]}.${rslt[1]}.${rslt[2]}.200 255.255.255.0 "
			return 0
		fi
	fi
	return 1
}

# Configure dnsmasq DHCP server
dhcp_configure_dnsmasq() {
	DHCP_DEV="${1}"
	DHCP_ADDRESSMASK="${2}"
	DHCP_DOMAIN="${3}"
	DHCP_ENABLE="${4}"

	DHCP_DNSMASQ_FILE="/etc/dnsmasq.d/simple-wifi-ap.conf"

	if [ "${DHCP_ENABLE}" -eq 1 ]; then
		# Create/overwrite '/etc/default/dnsmasq' file
		cat > "/etc/default/dnsmasq" << EOF
# This file has six functions:
# 1) to completely disable starting this dnsmasq instance
# 2) to set DOMAIN_SUFFIX by running \`dnsdomainname\`
# 3) to select an alternative config file
#    by setting DNSMASQ_OPTS to --conf-file=<file>
# 4) to tell dnsmasq to read the files in /etc/dnsmasq.d for
#    more configuration variables.
# 5) to stop the resolvconf package from controlling dnsmasq's
#    idea of which upstream nameservers to use.
# 6) to avoid using this dnsmasq instance as the system's default resolver
#    by setting DNSMASQ_EXCEPT="lo"
# For upgraders from very old versions, all the shell variables set
# here in previous versions are still honored by the init script
# so if you just keep your old version of this file nothing will break.

DOMAIN_SUFFIX="${DHCP_DOMAIN}"
#DNSMASQ_OPTS="--conf-file=/etc/dnsmasq.alt"

# Whether or not to run the dnsmasq daemon; set to 0 to disable.
# Note that this is only valid when using SYSV init. For systemd,
# use "systemctl disable dnsmasq"
ENABLED=1

# By default search this drop directory for configuration options.
# Libvirt leaves a file here to make the system dnsmasq play nice.
# Comment out this line if you don't want this. The dpkg-* are file
# endings which cause dnsmasq to skip that file. This avoids pulling
# in backups made by dpkg.
CONFIG_DIR=/etc/dnsmasq.d,.dpkg-dist,.dpkg-old,.dpkg-new

# If the resolvconf package is installed, dnsmasq will use its output
# rather than the contents of /etc/resolv.conf to find upstream
# nameservers. Uncommenting this line inhibits this behaviour.
# Note that including a "resolv-file=<filename>" line in
# /etc/dnsmasq.conf is not enough to override resolvconf if it is
# installed: the line below must be uncommented.
#IGNORE_RESOLVCONF=yes

# If the resolvconf package is installed, dnsmasq will tell resolvconf
# to use dnsmasq under 127.0.0.1 as the system's default resolver.
# Uncommenting this line inhibits this behaviour.
#DNSMASQ_EXCEPT="lo"
EOF

		# Generate DHCP range
		dhcp_range=$(dhcp_range_generate "${DHCP_ADDRESSMASK}")
		if [ ${?} -ne 0 ]; then
			echo "postinst: Failed to generate DHCP range."
			exit 1
		fi
		dhcp_range=( ${dhcp_range} )

		# Create/overwrite '${DHCP_DNSMASQ_FILE}' file
		cat > "${DHCP_DNSMASQ_FILE}" << EOF
interface=${DHCP_DEV}
	dhcp-range=${dhcp_range[0]},${dhcp_range[1]},${dhcp_range[2]},24h
EOF

		# Check for active interface
		interface_timeout=15
		while [ ${interface_timeout} -gt 0 ]; do
			nmcli --terse device show "${DHCP_DEV}" &>/dev/null
			if [ ${?} -eq 0 ]; then
				break
			fi
			interface_timeout=$((${interface_timeout}-1))
			sleep 1
		done
		if [ ${interface_timeout} -eq 0 ]; then
			echo "postinst: Timed out waiting for bridge to become active."
			exit 1
		fi

	else
		# Remove file containing DHCP configuration
		if [ -f "${DHCP_DNSMASQ_FILE}" ]; then
			rm "${DHCP_DNSMASQ_FILE}" &>/dev/null
			if [ ${?} -ne 0 ]; then
				echo "postinst: Failed to delete dnsmasq DHCP file."
				exit 1
			fi
		fi
	fi

	# Enable dnsmasq daemon
	systemctl enable dnsmasq.service &>/dev/null
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to enable dnsmasq service."
		exit 1
	fi
	# Restart dnsmasq daemon
	systemctl restart dnsmasq.service &>/dev/null
	if [ ${?} -ne 0 ]; then
		echo "postinst: Failed to restart dnsmasq service."
		exit 1
	fi
}

## Configure ISC DHCP server
#dhcp_configure_isc() {
#	DHCP_DEV="${1}"
#	DHCP_DOMAIN="router.lan"
#
#	# Create/overwrite '/etc/default/isc-dhcp-server' file
#	cat > "/etc/default/isc-dhcp-server" << EOF
## Defaults for isc-dhcp-server (sourced by /etc/init.d/isc-dhcp-server)
#
## Path to dhcpd's config file (default: /etc/dhcp/dhcpd.conf).
##DHCPDv4_CONF=/etc/dhcp/dhcpd.conf
##DHCPDv6_CONF=/etc/dhcp/dhcpd6.conf
#
## Path to dhcpd's PID file (default: /var/run/dhcpd.pid).
##DHCPDv4_PID=/var/run/dhcpd.pid
##DHCPDv6_PID=/var/run/dhcpd6.pid
#
## Additional options to start dhcpd with.
##       Don't use options -cf or -pf here; use DHCPD_CONF/ DHCPD_PID instead
##OPTIONS=""
#
## On what interfaces should the DHCP server (dhcpd) serve DHCP requests?
##       Separate multiple interfaces with spaces, e.g. "eth0 eth1".
#INTERFACESv4="${DHCP_DEV}"
##INTERFACESv6=""
#EOF
#
#	# Create/overwrite '/etc/dhcp/dhcpd.conf' file
#	cat > "/etc/dhcp/dhcpd.conf" << EOF
#option domain-name "${DHCP_DOMAIN}";
#option domain-name-servers ns1.${DHCP_DOMAIN};
#
#default-lease-time 600;
#max-lease-time 7200;
#
#ddns-update-style none;
#
#authoritative;
#
#subnet 192.168.1.0 netmask 255.255.255.0 {
#        range 192.168.1.100 192.168.1.200;
#}
#EOF
#
#	# Check for active interface
#	interface_timeout=15
#	while [ ${interface_timeout} -gt 0 ]; do
#		nmcli --terse device show "${DHCP_DEV}" &>/dev/null
#		if [ ${?} -eq 0 ]; then
#			break
#		fi
#		interface_timeout=$((${interface_timeout}-1))
#		sleep 1
#	done
#	if [ ${interface_timeout} -eq 0 ]; then
#		echo "postinst: Timed out waiting for bridge to become active."
#		exit 1
#	fi
#
#	# Restart ISC DHCP server
#	systemctl restart isc-dhcp-server.service &>/dev/null
#	if [ ${?} -ne 0 ]; then
#		echo "postinst: Failed to restart ISC DHCP service."
#		exit 1
#	fi
#}

case "$1" in
	configure)
		if db_get simple-wifi-ap/wifi_network_layout; then
			NET_LAYOUT="${RET}"						# Network Layout
		else
			echo "postinst: Failed to get network layout"
			exit 1
		fi
		if db_get simple-wifi-ap/wifi_device; then
			NM_WIFI_DEVICE="${RET}"						# Wifi Device
		else
			echo "postinst: Failed to get WiFi device"
			exit 1
		fi
		if db_get simple-wifi-ap/wifi_ipv4_method; then
			NET_IPV4_METHOD="${RET}"					# IPv4 method
		else
			echo "postinst: Failed to get IPv4 method"
			exit 1
		fi
		NET_IPV4_ADDRESSMASK=""
		NET_IPV4_DNS=""
		NET_IPV4_GATEWAY=""
		if [ "${NET_IPV4_METHOD}" = Static ]; then
			if db_get simple-wifi-ap/wifi_ipv4_addressmask; then
				NET_IPV4_ADDRESSMASK="${RET}"				# IPv4 Address/Subnet Mask
			else
				echo "postinst: Failed to get IPv4 address/mask"
				exit 1
			fi
			if db_get simple-wifi-ap/wifi_ipv4_dns; then
				NET_IPV4_DNS="${RET}"					# IPv4 DNS
			else
				echo "postinst: Failed to get IPv4 DNS server"
				exit 1
			fi
			if db_get simple-wifi-ap/wifi_ipv4_gateway; then
				NET_IPV4_GATEWAY="${RET}"				# IPv4 Gateway
			else
				echo "postinst: Failed to get IPv4 gateway"
				exit 1
			fi
		fi

		dhcpd_enable=0
		# Check whether to enable DHCP server
		if [ "${NET_IPV4_METHOD}" = Static ]; then
			dhcpd_enable=1
		fi
		DHCP_DOMAIN="router.lan"

		# Delete existing profiles
		nm_profile_delete_all
		if [ "${NET_LAYOUT}" = Stand-Alone ]; then
			# Create standalone Access Point profile
			nm_profile_accesspoint_create "${NM_WIFI_DEVICE}" "${NET_IPV4_METHOD}" "${NET_IPV4_ADDRESSMASK}" "${NET_IPV4_DNS}" "${NET_IPV4_GATEWAY}" ""

			dhcp_configure_dnsmasq "${NM_WIFI_DEVICE}" "${NET_IPV4_ADDRESSMASK}" "${DHCP_DOMAIN}" "${dhcpd_enable}"
		elif [ "${NET_LAYOUT}" = Bridged ]; then
			NM_BRIDGE_DEVICE="br0"
			nm_build_uuid=`nm_profile_bridge_create "${NM_BRIDGE_DEVICE}" "${NET_IPV4_METHOD}" "${NET_IPV4_ADDRESSMASK}" "${NET_IPV4_DNS}" "${NET_IPV4_GATEWAY}"`
			nm_bridge_interfaces_add "${nm_build_uuid}"
			nm_profile_accesspoint_create "${NM_WIFI_DEVICE}" "${NET_IPV4_METHOD}" "${NET_IPV4_ADDRESSMASK}" "${NET_IPV4_DNS}" "${NET_IPV4_GATEWAY}" "${nm_build_uuid}"

			dhcp_configure_dnsmasq "${NM_BRIDGE_DEVICE}" "${NET_IPV4_ADDRESSMASK}" "${DHCP_DOMAIN}" "${dhcpd_enable}"
		fi
	;;
#	abort-upgrade)
#	;;
esac

exit 0
