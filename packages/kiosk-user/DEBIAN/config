#!/bin/bash
# kiosk-user package configuration script

# Don't exit on error
#set -e

# source debconf library
. /usr/share/debconf/confmodule

check_username() {
	username="${1}"

	# Taken from adduser
	NAME_REGEX="^[a-z][-a-z0-9_]*\$"
	echo "${username}" | grep -Eq "^[a-z][-a-z0-9_]*\$"
	return ${?}
}

check_execpath() {
	execpath="${1}"

	# Check file is executable
	if [ -x "${execpath}" ]; then
		return 0
	else
		return 255
	fi
}

# Check for supported virtual keyboards
# Returns string of virtual keyboards
check_installed_virtual_keyboards() {
	rtn=""

	if [ -x "/usr/bin/matchbox-keyboard" ]; then
		rtn+="matchbox-keyboard "
	fi
	if [ -x "/usr/bin/onboard" ]; then
		rtn+="onboard "
	fi

	echo ${rtn}
}

# Check whether supported window managers are installed
# Returns string of window managers
check_installed_wm() {
	rtn=""

	if [ -x "/usr/bin/matchbox-window-manager" ]; then
		rtn+="matchbox-window-manager "
	fi
	if [ -x "/usr/bin/xfwm4" ]; then
		rtn+="xfwm4 "
	fi

	echo "${rtn}"
}

kiosk_add_option() {
	kiosk_option="${1}"
	option_selected="${2}"
	if [ -n "${KIOSK_OPTIONS}" ]; then
		KIOSK_OPTIONS="${KIOSK_OPTIONS}, "
	fi
	KIOSK_OPTIONS="${KIOSK_OPTIONS}${kiosk_option}"
	if [ ${option_selected} -eq 1 ]; then
		if [ -n "${KIOSK_SELECTED_OPTIONS}" ]; then
			KIOSK_SELECTED_OPTIONS="${KIOSK_SELECTED_OPTIONS}, "
		fi
		KIOSK_SELECTED_OPTIONS="${KIOSK_SELECTED_OPTIONS}${kiosk_option}"
	fi
}

# Is this being run on installation, or once it's installed [configure|reconfigure]
CONFIG_TYPE="${1}"

# Get name of user to run application as
# Only on installation
if [ "${CONFIG_TYPE}" = "configure" ]; then
	username_okay=0
	while [ "${username_okay}" -eq 0 ]; do
		# Get username
		db_set kiosk-user/username kiosk
		db_input high kiosk-user/username
		db_go

		if db_get kiosk-user/username; then
			check_username "$RET"
			if [ ${?} -eq 0 ]; then
				username_okay=1
			else
				db_input low kiosk-user/username_error
				db_go
				db_fset kiosk-user/username seen false
			fi
		else
			db_input low kiosk-user/username_error
			db_go
			db_fset kiosk-user/username seen false
		fi
	done
fi

# Get the full path to application to run
execpath_okay=0
while [ "${execpath_okay}" -eq 0 ]; do
	# Get path to executable
	db_input high kiosk-user/execpath
	db_go

	if db_get kiosk-user/execpath; then
		check_execpath "$RET"
		if [ ${?} -eq 0 ]; then
			execpath_okay=1
		else
			db_input low kiosk-user/execpath_error
			db_go
			db_fset kiosk-user/execpath seen false
		fi
	else
		db_input low kiosk-user/execpath_error
		db_go
		db_fset kiosk-user/execpath seen false
	fi
done

# Get the arguents to pass to the application
db_input high kiosk-user/execargs
db_go

# Select window manager
KIOSK_OPTIONS=""
KIOSK_SELECTED_OPTIONS=""

installed_window_managers=( $(check_installed_wm) )
# Check that at least one window manager is available
if [ -z "${installed_window_managers}" ]; then
	echo "kiosk-user: No supported window manager available."
	exit 255
fi
# Load kiosk options
for tmp_option in "${installed_window_managers[@]}"; do
	kiosk_add_option "${tmp_option}" 0
done

db_subst kiosk-user/window-manager window_managers "$KIOSK_OPTIONS"
# Only set options on installation
#if [ "${CONFIG_TYPE}" = "configure" ]; then
#	db_set kiosk-user/window-manager "${installed_window_managers[0]}"
#fi
db_input high kiosk-user/window-manager
db_go
# Get selected window manager
window_manager=""
if db_get kiosk-user/window-manager; then
	window_manager="$RET"
fi

# Select screen rotation
KIOSK_OPTIONS=""
KIOSK_SELECTED_OPTIONS=""

# Kiosk options
ROTATION_NORMAL="Normal"
ROTATION_ANTICLOCKWISE="90° Anti-Clockwise"
ROTATION_CLOCKWISE="90° Clockwise"
ROTATION_INVERTED="Inverted"
# Load kiosk options
kiosk_add_option "${ROTATION_NORMAL}" 0
kiosk_add_option "${ROTATION_ANTICLOCKWISE}" 0
kiosk_add_option "${ROTATION_CLOCKWISE}" 0
kiosk_add_option "${ROTATION_INVERTED}" 0

db_subst kiosk-user/screen_orientation screen_rotations "$KIOSK_OPTIONS"
# Only set options on installation
if [ "${CONFIG_TYPE}" = "configure" ]; then
	db_set kiosk-user/screen_orientation "${ROTATION_NORMAL}"
fi
db_input high kiosk-user/screen_orientation
db_go

screen_orientation_xrandr="normal"
if db_get kiosk-user/screen_orientation; then
	screen_orientation="$RET"

	# Anti-Clockwise
	if expr "${screen_orientation}" : ".*${ROTATION_ANTICLOCKWISE}.*" >/dev/null 2>&1; then
		screen_orientation_xrandr="left"
	fi
	# Clockwise
	if expr "${screen_orientation}" : ".*${ROTATION_CLOCKWISE}.*" >/dev/null 2>&1; then
		screen_orientation_xrandr="right"
	fi
	# Inverted
	if expr "${screen_orientation}" : ".*${ROTATION_INVERTED}.*" >/dev/null 2>&1; then
		screen_orientation_xrandr="inverted"
	fi
fi
db_set kiosk-user/screen_orientation_xrandr "${screen_orientation_xrandr}"

# Extra options
# Variable to pass to db_input
KIOSK_OPTIONS=""
KIOSK_SELECTED_OPTIONS=""

# Kiosk options
OPT_DISABLE_VIDEO="Disable video blanking"
OPT_HIDE_CURSOR="Hide cursor (when inactive)"
OPT_DISABLE_TITLEBAR="Disable titlebar"
OPT_USE_CURSOR="Use cursor (Matchbox WM)"
OPT_ENABLE_VIRT_KEYBRD="Enable virtual keyboard"
OPT_REFLECT_X="Reflect display: X axis (Xrandr)"
OPT_REFLECT_Y="Reflect display: Y axis (Xrandr)"
# Load kiosk options
kiosk_add_option "${OPT_DISABLE_TITLEBAR}" 1
kiosk_add_option "${OPT_DISABLE_VIDEO}" 1
if [ -n "$(check_installed_virtual_keyboards)" ]; then
	kiosk_add_option "${OPT_ENABLE_VIRT_KEYBRD}" 0
fi
kiosk_add_option "${OPT_HIDE_CURSOR}" 1
kiosk_add_option "${OPT_REFLECT_X}" 0
kiosk_add_option "${OPT_REFLECT_Y}" 0
if [ "$window_manager" = matchbox-window-manager ]; then
	kiosk_add_option "${OPT_USE_CURSOR}" 0
fi

db_subst kiosk-user/options options "$KIOSK_OPTIONS"
# Only set options on installation
if [ "${CONFIG_TYPE}" = "configure" ]; then
	db_set kiosk-user/options "$KIOSK_SELECTED_OPTIONS"
fi
db_input high kiosk-user/options
db_go

if db_get kiosk-user/options; then
	kiosk_options="$RET"

	# Disable titlebar
	if expr "${kiosk_options}" : ".*${OPT_DISABLE_TITLEBAR}.*" >/dev/null 2>&1; then
		db_set kiosk-user/disable_titlebar true
	else
		db_set kiosk-user/disable_titlebar false
	fi
	# Disable video blanking
	if expr "${kiosk_options}" : ".*${OPT_DISABLE_VIDEO}.*" >/dev/null 2>&1; then
		db_set kiosk-user/disable_blanking true
	else
		db_set kiosk-user/disable_blanking false
	fi
	# Enable virtual keyboard
	if expr "${kiosk_options}" : ".*${OPT_ENABLE_VIRT_KEYBRD}.*" >/dev/null 2>&1; then
		db_set kiosk-user/enable_virtual_keyboard true
	else
		db_set kiosk-user/enable_virtual_keyboard false
	fi
	# Hide cursor
	if expr "${kiosk_options}" : ".*${OPT_HIDE_CURSOR}.*" >/dev/null 2>&1; then
		db_set kiosk-user/hide_cursor true
	else
		db_set kiosk-user/hide_cursor false
	fi
	# Reflect screen X axis
	if expr "${kiosk_options}" : ".*${OPT_REFLECT_X}.*" >/dev/null 2>&1; then
		db_set kiosk-user/screen_reflect_x true
	else
		db_set kiosk-user/screen_reflect_x false
	fi
	# Reflect screen Y axis
	if expr "${kiosk_options}" : ".*${OPT_REFLECT_Y}.*" >/dev/null 2>&1; then
		db_set kiosk-user/screen_reflect_y true
	else
		db_set kiosk-user/screen_reflect_y false
	fi
	# Use cursor
	if expr "${kiosk_options}" : ".*${OPT_USE_CURSOR}.*" >/dev/null 2>&1; then
		db_set kiosk-user/use_cursor true
	else
		db_set kiosk-user/use_cursor false
	fi
fi

# If virtual keyboard enabled, select one
if db_get kiosk-user/enable_virtual_keyboard && [ "${RET}" = true ]; then
	# Select virtual keyboard
	KIOSK_OPTIONS=""
	KIOSK_SELECTED_OPTIONS=""

	installed_virtual_keyboards=( $(check_installed_virtual_keyboards) )
	# Check that at least one window manager is available
	if [ -z "${installed_virtual_keyboards}" ]; then
		echo "kiosk-user: No supported virtual keyboards installed."
		exit 255
	fi
	# Load kiosk options
	for tmp_option in "${installed_virtual_keyboards[@]}"; do
		kiosk_add_option "${tmp_option}" 0
	done

	db_subst kiosk-user/virtual_keyboard virtual_keyboards "$KIOSK_OPTIONS"
#	# Only set options on installation
#	#if [ "${CONFIG_TYPE}" = "configure" ]; then
#	#	db_set kiosk-user/window-manager "${installed_window_managers[0]}"
#	#fi
	db_input high kiosk-user/virtual_keyboard
	db_go
fi
