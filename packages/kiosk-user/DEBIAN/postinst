#!/bin/bash
set -e

# summary of how this script can be called:
#       * <postinst> `configure' <most-recently-configured-version>
#       * <old-postinst> `abort-upgrade' <new version>
#       * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#         <new-version>
#       * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#         <failed-install-package> <version> `removing'
#         <conflicting-package> <version>
#
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

. /usr/share/debconf/confmodule

create_systemd_autologin() {
	login_username="${1}"

	systemd_service_dir="/etc/systemd/system/getty@tty1.service.d"
	systemd_service_file="${systemd_service_dir}/kiosk-user.conf"
	systemd_service="getty@tty1.service"

	# Create service directory
	if [ ! -d "${systemd_service_dir}" ]; then
		mkdir -p "${systemd_service_dir}" >/dev/null 2>&1
		if [ ${?} -ne 0 ]; then
			echo "postinst: Error creating systemd service directory"
			return 255
		fi
		db_set kiosk-user/autologin_service_dir "${systemd_service_dir}"
		db_set kiosk-user/autologin_service_dir_delete true
	else
		db_set kiosk-user/autologin_service_dir_delete false
	fi

	# Create service file
	if [ ! -f "${systemd_service_file}" ]; then
		cat > "${systemd_service_file}" << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty -o '-p -f -- \\u' --noclear --autologin ${login_username} %I $TERM
EOF

		db_set kiosk-user/autologin_service_file "${systemd_service_file}"
		db_set kiosk-user/autologin_service_file_delete true
	else
		db_set kiosk-user/autologin_service_file_delete false
	fi

	# Enable service
	systemctl enable "${systemd_service}" >/dev/null || true
	systemctl start "${systemd_service}" >/dev/null || true

	db_set kiosk-user/autologin_service_name "${systemd_service}"

	return 0
}

create_xsession() {
	xsession_file="${1}/.xinitrc"

	# Write header
	cat > "${xsession_file}" << EOF
# kiosk-user: X11 session file for startx
#
# Do not edit, use 'dpkg-reconfigure kiosk-user' to update
###########################################################

EOF

	if db_get kiosk-user/disable_blanking && [ "${RET}" = true ]; then
		cat >> "${xsession_file}" << EOF
# Disable DPMS (Energy Star) features
xset -dpms
# Disable video blanking
xset s noblank
# Disable screen saver
xset s off

EOF
	fi

	# Create matchbox-window-manager args
	matchbox_wm_cmd="matchbox-window-manager"
	if db_get kiosk-user/disable_titlebar && [ "${RET}" = true ]; then
		matchbox_wm_cmd="${matchbox_wm_cmd} -use_titlebar no"
	fi
	if db_get kiosk-user/use_cursor && [ "${RET}" = true ]; then
		matchbox_wm_cmd="${matchbox_wm_cmd} -use_cursor yes"
	fi
	if db_get kiosk-user/matchbox_wm_theme; then
		matchbox_wm_cmd="${matchbox_wm_cmd} -theme ${RET}"
	fi
	cat >> "${xsession_file}" << EOF
# Start window manager
${matchbox_wm_cmd} &

EOF

	# Hide cursor when not in use
	if db_get kiosk-user/hide_cursor && [ "${RET}" = true ]; then
		cat >> "${xsession_file}" << EOF
# Hide cursor when inactive
unclutter &

EOF
	fi

	# Run kiosk application
	if db_get kiosk-user/execpath; then
		kiosk_application="${RET}"

		kiosk_application_args=""
		if db_get kiosk-user/execargs; then
			kiosk_application_args="${RET}"
		fi

		cat >> "${xsession_file}" << EOF
# Run application
${kiosk_application} ${kiosk_application_args}
EOF
	else
		echo "postinst: No kiosk application given"
		return 255
	fi
}

case "$1" in
	configure)
		if db_get kiosk-user/username; then
			KIOSK_USER="$RET"
		else
			echo "postinst: Failed to get kiosk username"
			return 255
		fi

		create_systemd_autologin "${KIOSK_USER}"
		create_xsession "/home/${KIOSK_USER}"
	;;
#	abort-upgrade)
#	;;
esac

exit 0
